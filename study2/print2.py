# 1
# 문자열 'hello'가 있을 때 이를 'Hello'로 변경해보세요.
a = "hello"
a = a.capitalize()

# 2
# 파일 이름이 문자열로 저장되어 있을 때 endswith 메서드를 사용해서 파일 이름이 'xlsx'로 끝나는지 확인해보세요.
# endswith 메소드 활용
# file_name = "보고서.xlsx"
file_name = "보고서.xlsx"
file_name.endswith("xlsx")

# 3
# 다음과 같은 문자열이 있을 때 공백을 기준으로 문자열을 나눠보세요.
# a = "hello world"
a = "hello world"
a.split()
# 문자열의 split() 메서드를 사용하면 문자열에서 공백을 기준으로 분리해준다.

# 4
# 다음과 같이 문자열이 있을 때 btc와 krw로 나눠보세요.
# ticker = "btc_krw"
# 문자열에서 split() 메서드는 문자열을 분리할 때 사용합니다.
# 이때 어떤 값을 넘겨주면 그 값을 기준으로 문자열을 분리해줍니다.
ticker = "btc_krw"
ticker.split("_")

# 5
# 다음과 같이 날짜를 표현하는 문자열이 있을 때 연도, 월, 일로 나눠보세요.
# date = "2021-07-20"
date = "2021-07-20"
date.split("-")

# 6
# 문자열의 오른쪽에 공백이 있을 때 이를 제거해보세요.\
# data = "039490     "
# rstrip() 메서드를 사용하면 오른쪽 공백이 제거된 새로운 문자열 객체가 반환된다.
# 그 값을 data라는 변수가 새로 바인딩합니다. 기존의 공백이 포함된 문자열은 메모리에서 자동으로 삭제된다.
data = "039490     "
data = data.rstrip()


# 7
# 2016년 11월 영화 예매 순위 기준 top3는 다음과 같습니다.
# 영화 제목을 movie_rank 이름의 리스트에 저장해보세요. (순위 정보는 저장하지 않습니다.)
# 영화 제목은 문자열로 표현 가능
# 여러 개의 값을 저장하기 위해 파이썬 리스트 자료형을 사용한다.
movie_rank = ["닥터 스트레인지", "스플릿", "럭키"]

# 8
# movie_rank 리스트에 "아이언맨" 을 추가하라.
movie_rank = ["닥터 스트레인지", "스플릿", "럭키"]
movie_rank.append("아이언맨")
print(movie_rank)

# 9
# movie_rank 리스트에는 아래와 같이 네 개의 영화 제목이 바인딩되어 있다.
# "슈퍼맨"을 "닥터 스트레인지"와 "스플릿" 사이에 추가하라.
# movie_rank = ['닥터 스트레인지', '스플릿', '럭키', '아이언맨']
# 리스트의 insert(인덱스, 원소) 메소드를 사용하면 특정 위치에 값을 끼어넣기 할 수 있다.
movie_rank = ['닥터 스트레인지', '스플릿', '럭키', '아이언맨']
movie_rank.insert(1, "슈퍼맨")
print(movie_rank)

# 10
# movie_rank 리스트에서 '럭키'를 삭제하라.
# movie_rank = ['닥터 스트레인지', '슈퍼맨', '스플릿', '럭키', '아이언맨']
movie_rank = ['닥터 스트레인지', '슈퍼맨', '스플릿', '럭키', '아이언맨']
del movie_rank[3]
print(movie_rank)

# 11
# lang1과 lang2 리스트가 있을 때 lang1과 lang2의 원소를 모두 갖고 있는 langs 리스트를 만들어라.
# lang1 = ["C", "C++", "JAVA"]
# lang2 = ["Python", "Go", "C#"]
# langs ['C', 'C++', 'JAVA', 'Python', 'Go', 'C#']
lang1 = ["C", "C++", "JAVA"]
lang2 = ["Python", "Go", "C#"]
langs = lang1 + lang2
print(langs)

# 12
# 다음 리스트에서 최댓값과 최솟값을 출력하라. (힌트: min(), max() 함수 사용)
# nums = [1, 2, 3, 4, 5, 6, 7]
# max:  7
# min:  1
nums = [1, 2, 3, 4, 5, 6, 7]
print("max: ", max(nums))
print("min: ", min(nums))

# 13
# 다음 리스트의 합을 출력하라.
# nums = [1, 2, 3, 4, 5]
# 실행 : 15
nums = [1, 2, 3, 4, 5]
print(sum(nums))

# 14
# 다음 리스트에 저장된 데이터의 개수를 화면에 구하하라.
# eat = ["피자", "김밥", "만두", "양념치킨", "족발", "피자", "김치만두", "쫄면", "쏘세지", "라면", "팥빙수", "김치전"]
eat = ["피자", "김밥", "만두", "양념치킨", "족발", "피자",
       "김치만두", "쫄면", "쏘세지", "라면", "팥빙수", "김치전"]
print(len(eat))

# 15
# 다음 리스트의 평균을 출력하라.
# nums = [1, 2, 3, 4, 5]
# 실행 예: 3.0
nums = [1, 2, 3, 4, 5]
average = sum(nums) / len(nums)  # 나누기
print(average)


# 16
# price 변수에는 날짜와 종가 정보가 저장돼 있다. 날짜 정보를 제외하고 가격 정보만을 출력하라. (힌트 : 슬라이싱)
# price = ['20180728', 100, 130, 140, 150, 160, 170]
# 출력 예시: [100, 130, 140, 150, 160, 170]
price = ['20180728', 100, 130, 140, 150, 160, 170]
print(price[1:])

# 17
# 슬라이싱을 사용해서 홀수만 출력하라.
# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 실행 예: [1, 3, 5, 7, 9]
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[::2])

# 18
# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 실행 예: [2, 4, 6, 8, 10]
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nums[1::2])
